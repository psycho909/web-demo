$row:8;
$col:8;
$mineCount:10;
$minePos:();
@for $i from 0 to $mineCount {
    $mine: 0;
    $continue: true;
    @while $continue !=null {
        $mine: random(($row*$col)-1);
        $continue: index($minePos, $mine);
    }
    $minePos:append($minePos, $mine);
}

#normal-mode:checked~.field {
    .mark_as_opened {
        display: block;
    }
    .mark_as_flag {
        display: none;
    }
}

#flag-mode:checked~.field {
    .mark_as_opened {
        display: none;
    }
    .mark_as_flag {
        display: block;
    }
}

@mixin open {
    background-color: #EEE;
    .mark_as_flag,
    .mark_as_opened {
        display: none;
    }
}

@for $i from 0 to $col * $row {
    .cell:nth-child(#{$i+1}) {
        #input-#{$i}-open:checked~.field & {
            @include open;
        }
        #input-#{$i}-flag:checked~.field & {
            &::before {
                content: "🚩";
            }
            .mark_as_opened {
                display: none;
            }
        }
    }
}

@mixin open {
    &::before {
        display: flex;
        height: 100%;
        justify-content: center;
        align-items: center;
    }
}

@function isMine($pos) {
    @return index($minePos, $pos) !=null;
}

@function countMine($pos) {
    $count: 0;
    @each $n in getNeighborIndex($pos) {
        @if isMine($n) {
            $count: $count + 1;
        }
    }
    @return $count;
}

$mineSelector: ();
@for $i from 0 to $col * $row {
    $mines: countMine($i);
    $isMine: isMine($i);
    .cell:nth-child(#{$i + 1}) {
        &::before {
            @if $isMine {
                $mineSelector: append($mineSelector, #{&}, 'comma');
            }
            @else {
                content: if($mines > 0, "#{$mines}", '');
            }
            display: none;
        }
    }
}

#{$mineSelector} {
    content: '■';
}

$areaOffsets: ( (-$col, $col), // 上下
(-$col - 1, -1, $col - 1), // 左側
(-$col + 1, +1, $col + 1), // 右側
);
// フィールドの範囲内か判定
@function isValidPos($pos) {
    @return ( $pos >=0 and $pos < $row * $col);
}

// 周辺８マスのポジションを取得
@function getNeighborIndex($center) {
    $wk: nth($areaOffsets, 1);
    @if $center % $col !=0 {
        // 左端の場合スキップ
        $wk: join($wk, nth($areaOffsets, 2));
    }
    @if $center % $col !=$col - 1 {
        // 右恥の場合スキップ
        $wk: join($wk, nth($areaOffsets, 3));
    }
    $ret: ();
    @each $offset in $wk {
        @if isValidPos($center + $offset) {
            // 範囲外は省く
            $ret: append($ret, $center + $offset);
        }
    }
    @return $ret;
}

@function getLinks($center, $linked) {
    $neighber: getNeighborIndex($center);
    $tmp: $linked;
    @each $n in $neighber {
        @if index($tmp, $n)==null {
            $c: countMine($n);
            $tmp: append($tmp, $n);
            @if $c==0 {
                $tmp: getLinks($n, $tmp);
            }
        }
    }
    @return $tmp;
}

@for $i from 0 to $col * $row {
    $mines: countMine($i);
    $isMine: isMine($i);
    @if not($isMine) and $mines==0 {
        $selector: ();
        @each $p in getLinks($i, ()) {
            $selector: append($selector, "#input-#{$i}-open:checked ~ .field .cell:nth-child(#{$p + 1})");
        }
        #{join($selector, (), 'comma')} {
            @include open;
        }
        $debug: $selector;
    }
}

$lastSelector: "";
@for $n from 1 through $row * $col {
    $lastSelector: $lastSelector + ".flag_check:checked ~";
    #{$lastSelector} .notice_area .last {
        &::before {
            content: "#{$mineCount - $n}";
        }
    }
}

.notice_area .last {
    &::before {
        content: "#{$mineCount}";
    }
    &::after {
        content: '個';
    }
}

$overSelector: ();
@each $p in $minePos {
    #input-#{$p}-open:checked~.game_over {
        $overSelector: append($overSelector, #{&}, 'comma');
    }
}

#{$overSelector} {
    display: flex;
}

$clearSelector: "input";
@for $i from 0 to $col * $row {
    $wk: "";
    @if isMine($i) {
        $wk: "#input-#{$i}-flag:checked";
    }
    @else {
        $wk: "#input-#{$i}-flag:not(:checked)";
    }
    $clearSelector: $clearSelector+' ~ '+$wk;
}

#{$clearSelector}~.game_clear {
    display: flex;
}